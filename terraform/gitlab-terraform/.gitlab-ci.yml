stages:
  - validate
  - plan
  - apply
  - destroy

image: 
  name : hashicorp/terraform:latest
  entrypoint: ["/bin/sh", "-c"]

variables:
  TF_ROOT: "${CI_PROJECT_DIR}/terraform/gitlab-terraform/infra"
  TF_HTTP_ADDRESS: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/default"
  TF_HTTP_LOCK_ADDRESS: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/default/lock"
  TF_HTTP_UNLOCK_ADDRESS: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/default/lock"
  TF_HTTP_USERNAME: "gitlab-ci-token"
  TF_HTTP_PASSWORD: "${CI_JOB_TOKEN}"
  TF_HTTP_LOCK_METHOD: "POST"
  TF_HTTP_UNLOCK_METHOD: "DELETE"


before_script:
  - cd $TF_ROOT
  - terraform --version
  - terraform init

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - $TF_ROOT/.terraform/
    - $TF_ROOT/.terraform.lock.hcl

validate-job:
  stage: validate
  script: 
    - terraform validate
    - terraform fmt -check
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"  
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH   
      when: always
  tags:
    - docker

plan-job:
  stage: plan
  script:
    - terraform plan -out="planfile"
    - terraform show -no-color planfile > plan_output.txt
  artifacts:
    paths:
      - $TF_ROOT/planfile
      - $TF_ROOT/plan_output.txt
    expire_in: "7 days"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - docker

apply-job:
  stage: apply
  script:
    - terraform apply -auto-approve "planfile"
  dependencies:
    - plan-job
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  tags:
    - docker

destroy-job:
  stage: destroy
  script:
    - terraform destroy -auto-approve
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  tags:
    - docker