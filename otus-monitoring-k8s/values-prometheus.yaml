# =============================================================================
# KUBE-PROMETHEUS-STACK: Helm Values конфигурация
# =============================================================================
# Файл конфигурации для Helm chart kube-prometheus-stack
# Содержит полный стек мониторинга: Prometheus + Grafana + AlertManager
# Оптимизирован для практических занятий и обучения

# =============================================================================
# GRAFANA: Система визуализации и дашбордов
# =============================================================================
grafana:
  # Настройки аутентификации
  adminPassword: "otus123"  # Простой пароль для занятий (admin/otus123)
  
  # Постоянное хранилище для дашбордов и настроек
  persistence:
    enabled: true           # Включить PersistentVolume
    size: 2Gi              # Размер диска для Grafana
  
  # Предустановленные дашборды Kubernetes
  defaultDashboardsEnabled: true  # Автоматически создаёт дашборды K8s
  
  # ==========================================================================
  # DATASOURCES: Автоматическая настройка источников данных
  # ==========================================================================
  # Grafana Provisioning - автоматическая настройка при запуске
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Loki                    # Имя источника данных в Grafana
        type: loki                    # Тип плагина для Loki
        url: http://loki:3100         # URL Loki сервиса (внутри кластера)
        access: proxy                 # Режим доступа (proxy/direct)
        isDefault: false              # Не делать источником по умолчанию
        jsonData:
          maxLines: 1000              # Максимум строк логов в запросе
        editable: true                # Разрешить редактирование в UI
  
  # ==========================================================================
  # GRAFANA.INI: Основные настройки Grafana сервера
  # ==========================================================================
  grafana.ini:
    server:
      domain: localhost                   # Домен для Grafana
      root_url: "http://localhost:3000"   # Базовый URL (для port-forward)
    security:
      allow_embedding: true               # Разрешить iframe встраивание
    auth.anonymous:
      enabled: false                      # Отключить анонимный доступ

# =============================================================================
# PROMETHEUS: Система сбора и хранения метрик
# =============================================================================
prometheus:
  prometheusSpec:
    # ==========================================================================
    # RETENTION: Настройки хранения данных
    # ==========================================================================
    retention: 1d           # Время хранения метрик (1 день для занятий)
    retentionSize: 2GB      # Максимальный размер данных на диске
    
    # ==========================================================================
    # STORAGE: Постоянное хранилище для метрик
    # ==========================================================================
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]  # Режим доступа к диску
          resources:
            requests:
              storage: 5Gi                # Размер диска для метрик
    
    # ==========================================================================
    # RESOURCES: Ограничения ресурсов для Prometheus
    # ==========================================================================
    resources:
      requests:               # Минимальные ресурсы (guaranteed)
        memory: 400Mi         # RAM для работы Prometheus
        cpu: 100m             # CPU (0.1 core) для работы
      limits:                 # Максимальные ресурсы (limits)
        memory: 800Mi         # Максимум RAM
        cpu: 200m             # Максимум CPU (0.2 core)

# =============================================================================
# ALERTMANAGER: Система управления алертами и уведомлениями
# =============================================================================
alertmanager:
  alertmanagerSpec:
    # ==========================================================================
    # STORAGE: Хранилище для конфигурации и состояния алертов
    # ==========================================================================
    storage:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]  # Режим доступа к диску
          resources:
            requests:
              storage: 1Gi                # Размер диска для AlertManager
    
    # ==========================================================================
    # RESOURCES: Ограничения ресурсов для AlertManager
    # ==========================================================================
    resources:
      requests:               # Минимальные ресурсы
        memory: 200Mi         # RAM для AlertManager
        cpu: 100m             # CPU для обработки алертов
      limits:                 # Максимальные ресурсы
        memory: 400Mi         # Максимум RAM
        cpu: 200m             # Максимум CPU

# =============================================================================
# EXPORTERS: Сборщики метрик с различных компонентов
# =============================================================================

# NODE EXPORTER: Метрики операционной системы и железа
nodeExporter:
  enabled: true                 # Включить сбор метрик с узлов (CPU, RAM, диск, сеть)

# KUBE STATE METRICS: Метрики состояния объектов Kubernetes
kubeStateMetrics:
  enabled: true                 # Включить сбор метрик K8s (поды, сервисы, деплойменты)

# =============================================================================
# PROMETHEUS OPERATOR: Управляющий компонент стека
# =============================================================================
# Prometheus Operator автоматизирует развертывание и управление Prometheus
prometheusOperator:
  # ==========================================================================
  # RESOURCES: Ограничения ресурсов для Operator
  # ==========================================================================
  resources:
    requests:                   # Минимальные ресурсы для Operator
      memory: 200Mi             # RAM для управления CRD
      cpu: 100m                 # CPU для обработки изменений
    limits:                     # Максимальные ресурсы
      memory: 400Mi             # Максимум RAM
      cpu: 200m                 # Максимум CPU

# =============================================================================
# KUBERNETES COMPONENTS: Мониторинг системных компонентов K8s
# =============================================================================
# Включение сбора метрик с основных компонентов Kubernetes кластера

kubeApiServer:                  # API Server - центральный компонент K8s
  enabled: true                 # Метрики запросов, латентности, ошибок

kubeControllerManager:          # Controller Manager - управление контроллерами
  enabled: true                 # Метрики работы контроллеров

kubeScheduler:                  # Scheduler - планировщик подов
  enabled: true                 # Метрики планирования и размещения

kubeProxy:                      # Kube-proxy - сетевой прокси
  enabled: true                 # Метрики сетевых правил и соединений

kubelet:                        # Kubelet - агент на каждом узле
  enabled: true                 # Метрики подов, контейнеров, ресурсов 